from aiogram import Dispatcher
from aiogram.types import Message

from tgbot.data.commands import COMMANDS
from tgbot.filters.chat import PrivateChat
from tgbot.filters.users import StaffFilter
from tgbot.keyboards.reply import SUPERUSER_COMMANDS, ADMIN_COMMANDS
from tgbot.models.models import Users


async def admin_start(message: Message):
    if message.from_user.id in message.bot["config"].tg_bot.admin_ids:
        keyboard = SUPERUSER_COMMANDS
    else:
        keyboard = ADMIN_COMMANDS
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É",
        reply_markup=keyboard
    )


async def all_subscribers(message: Message):
    subs_db: list[Users] = await Users.query.gino.all()
    if not subs_db:
        await message.answer("–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–µ—Ç)")
        return
    text = "\n".join(map(
        lambda model: f"üë§ @{model.username}\n"
                      f"üÜî Telegram Id: {model.tg_id}\n"
                      f"üí∞ –ë–∞–ª–∞–Ω—Å: {model.balance}\n"
                      f'üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {model.subscribed_date}\n'
        if model.username else
        f"üë§ +{model.phone_number}\n"
        f"üÜî Telegram Id: {model.tg_id}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {model.balance}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {model.subscribed_date}\n",
        subs_db
    ))
    await message.answer(f"–°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n\n{text}\n\n–ò—Ç–æ–≥–æ: {len(subs_db)} —à—Ç.")


def register_start_handlers(dp: Dispatcher):
    dp.register_message_handler(
        admin_start, PrivateChat(),
        StaffFilter(), commands=["start"],
        state="*", commands_prefix="!/"
    )
    dp.register_message_handler(
        all_subscribers, PrivateChat(),
        StaffFilter(), text=COMMANDS["subscribers_list"]
    )
